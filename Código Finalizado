#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>

#define MAX_CANDIDATOS 5
#define MAX_USUARIOS 100
#define MAX_NOME 100

typedef struct {
    int numero;
    char nome[MAX_NOME];
    int votos;
} Candidato;

typedef struct {
    char nome[MAX_NOME];
    char cpf[15]; // Formato XXX.XXX.XXX-XX
    char rg[12];  // Formato XX.XXX.XXX-X
    char senha[20];
    int votou;
} Usuario;

// Lista de nomes possíveis para candidatos
char *nomes_possiveis[] = {
    "João", "Maria", "Pedro", "Ana", "Carlos",
    "Fernanda", "José", "Paula", "Lucas", "Julia",
    "Tiago", "Rafaela", "Miguel", "Beatriz", "Arthur",
    "Carla", "Eduardo", "Larissa", "Daniel", "Isabel"
};
int total_nomes = 20;

// Função simples para "hashear" a senha (apenas soma dos caracteres para simplificar)
int hash_senha(char *senha) {
    int hash = 0;
    while (*senha) {
        hash += *senha;
        senha++;
    }
    return hash;
}

// Função para validar CPF no formato XXX.XXX.XXX-XX
int validar_cpf(const char *cpf) {
    if (strlen(cpf) != 14 || cpf[3] != '.' || cpf[7] != '.' || cpf[11] != '-') {
        return 0;
    }
    for (int i = 0; i < 14; i++) {
        if (i == 3 || i == 7 || i == 11) continue;
        if (!isdigit(cpf[i])) return 0;
    }
    return 1;
}

// Função para validar RG no formato XX.XXX.XXX-X
int validar_rg(const char *rg) {
    if (strlen(rg) != 12 || rg[2] != '.' || rg[6] != '.' || rg[10] != '-') {
        return 0;
    }
    for (int i = 0; i < 12; i++) {
        if (i == 2 || i == 6 || i == 10) continue;
        if (!isdigit(rg[i])) return 0;
    }
    return 1;
}

// Função para validar o número do candidato
int validar_numero_candidato(int numero, Candidato *candidatos, int n) {
    for (int i = 0; i < n; i++) {
        if (candidatos[i].numero == numero) {
            return 1; // Número de candidato é válido
        }
    }
    return 0; // Número inválido
}

// Função para votar com validação aprimorada
void votar(Candidato *candidatos, int n, Usuario *usuario) {
    if (usuario->votou) {
        printf("Você já votou!\n");
        return;
    }

    int numero;
    printf("Digite o número do candidato para votar: ");
    scanf("%d", &numero);

    if (!validar_numero_candidato(numero, candidatos, n)) {
        printf("Número de candidato inválido.\n");
        return;
    }

    for (int i = 0; i < n; i++) {
        if (candidatos[i].numero == numero) {
            candidatos[i].votos++;
            usuario->votou = 1;
            printf("Voto registrado para %s.\n", candidatos[i].nome);

            // Log de ação
            FILE *log = fopen("log.txt", "a");
            fprintf(log, "Usuário %s votou no candidato %s (número %d)\n", usuario->nome, candidatos[i].nome, numero);
            fclose(log);

            return;
        }
    }
}

// Função para encerrar a votação e exibir o vencedor
void encerrar_votacao(Candidato *candidatos, int n) {
    int max_votos = -1;
    char vencedor[MAX_NOME];
    printf("\nResultado da votação:\n");

    for (int i = 0; i < n; i++) {
        printf("%s recebeu %d votos.\n", candidatos[i].nome, candidatos[i].votos);
        if (candidatos[i].votos > max_votos) {
            max_votos = candidatos[i].votos;
            strcpy(vencedor, candidatos[i].nome);
        }
    }

    printf("O vencedor é: %s com %d votos!\n", vencedor, max_votos);
}

// Função para sortear nomes aleatórios para os candidatos
void sortear_nomes_candidatos(Candidato *candidatos, int n) {
    int indices_usados[MAX_CANDIDATOS] = {0}; // Para evitar repetição de nomes

    for (int i = 0; i < n; i++) {
        int indice;
        do {
            indice = rand() % total_nomes; // Sorteia um índice de nome aleatório
        } while (indices_usados[indice]);  // Garante que o nome não seja repetido

        strcpy(candidatos[i].nome, nomes_possiveis[indice]);
        indices_usados[indice] = 1; // Marca o nome como usado
    }
}

// Função para mostrar os candidatos
void mostrar_candidatos(Candidato *candidatos, int n) {
    printf("\n----- Candidatos -----\n");
    for (int i = 0; i < n; i++) {
        printf("Número: %d, Nome: %s\n", candidatos[i].numero, candidatos[i].nome);
    }
}

// Função para cadastrar novos usuários
void cadastrar_usuario(Usuario *usuarios, int *total_usuarios) {
    char nome[MAX_NOME], senha[20], cpf[15], rg[12];
    printf("Nome do Usuário: ");
    scanf("%s", nome);

    do {
        printf("CPF (XXX.XXX.XXX-XX): ");
        scanf("%s", cpf);
        if (!validar_cpf(cpf)) {
            printf("CPF inválido! Tente novamente.\n");
        }
    } while (!validar_cpf(cpf));

    do {
        printf("RG (XX.XXX.XXX-X): ");
        scanf("%s", rg);
        if (!validar_rg(rg)) {
            printf("RG inválido! Tente novamente.\n");
        }
    } while (!validar_rg(rg));

    printf("Senha: ");
    scanf("%s", senha);

    int hash = hash_senha(senha);
    strcpy(usuarios[*total_usuarios].nome, nome);
    strcpy(usuarios[*total_usuarios].cpf, cpf);
    strcpy(usuarios[*total_usuarios].rg, rg);
    usuarios[*total_usuarios].votou = 0; // Inicialmente, ninguém votou
    sprintf(usuarios[*total_usuarios].senha, "%d", hash);

    (*total_usuarios)++;
    printf("Usuário %s cadastrado com sucesso.\n", nome);
}

// Função para login de usuários
Usuario* login_usuario(Usuario *usuarios, int total_usuarios) {
    char nome[MAX_NOME], senha[20];
    printf("Nome de usuário: ");
    scanf("%s", nome);
    printf("Senha: ");
    scanf("%s", senha);

    int hash = hash_senha(senha);

    for (int i = 0; i < total_usuarios; i++) {
        if (strcmp(usuarios[i].nome, nome) == 0 && atoi(usuarios[i].senha) == hash) {
            printf("Login bem-sucedido.\n");
            return &usuarios[i]; // Retorna o usuário logado
        }
    }
    printf("Usuário ou senha incorretos.\n");
    return NULL;
}

// Função principal
int main() {
    srand(time(NULL)); // Inicializa a semente para gerar números aleatórios

    Candidato candidatos[MAX_CANDIDATOS] = {
        {1, "", 0},
        {2, "", 0},
        {3, "", 0},
        {4, "", 0},
        {5, "", 0}
    };

    Usuario usuarios[MAX_USUARIOS];
    int total_usuarios = 0;
    int opcao;
    int votacao_encerrada = 0;

    // Sorteia os nomes dos candidatos antes da votação
    sortear_nomes_candidatos(candidatos, MAX_CANDIDATOS);

    while (1) {
        printf("\n----- Sistema de Votação -----\n");
        printf("1. Cadastrar novo usuário\n");
        printf("2. Login\n");
        printf("3. Mostrar candidatos\n");
        printf("4. Encerrar votação\n");
        printf("5. Sair\n");
        printf("Escolha uma opção: ");
                scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                cadastrar_usuario(usuarios, &total_usuarios);
                break;
            
            case 2: {
                Usuario *usuario_logado = login_usuario(usuarios, total_usuarios);
                if (usuario_logado != NULL && !votacao_encerrada) {
                    votar(candidatos, MAX_CANDIDATOS, usuario_logado);
                } else if (votacao_encerrada) {
                    printf("A votação já foi encerrada.\n");
                }
                break;
            }
            
            case 3:
                mostrar_candidatos(candidatos, MAX_CANDIDATOS);
                break;
            
            case 4:
                if (!votacao_encerrada) {
                    encerrar_votacao(candidatos, MAX_CANDIDATOS);
                    votacao_encerrada = 1; // Marca como encerrada
                } else {
                    printf("A votação já foi encerrada anteriormente.\n");
                }
                break;
            
            case 5:
                printf("Encerrando o programa...\n");
                exit(0); // Encerra o programa
            
            default:
                printf("Opção inválida! Tente novamente.\n");
        }
    }

    return 0;
}

